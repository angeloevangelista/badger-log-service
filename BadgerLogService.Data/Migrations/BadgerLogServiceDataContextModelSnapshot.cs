// <auto-generated />
using System;
using BadgerLogService.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BadgerLogService.Data.Migrations
{
    [DbContext(typeof(BadgerLogServiceDataContext))]
    partial class BadgerLogServiceDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BadgerLogService.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_applications");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("BadgerLogService.Domain.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("data");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(1,0)")
                        .HasDefaultValue(0)
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("message");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("source");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("stack_trace");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("tags");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_logs");

                    b.HasIndex("ApplicationId");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("BadgerLogService.Domain.Entities.Log", b =>
                {
                    b.HasOne("BadgerLogService.Domain.Entities.Application", "Application")
                        .WithMany("Logs")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_logs_applications")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("BadgerLogService.Domain.Entities.Application", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
